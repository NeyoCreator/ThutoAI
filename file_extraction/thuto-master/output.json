{
    "extracted_data": "\nfrom email import message\nfrom flask import Flask, render_template,redirect,url_for \nfrom flask_bootstrap import Bootstrap\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField,BooleanField\nfrom wtforms.validators import InputRequired, Email, Length\nimport email_validator\nfrom flask_sqlalchemy import SQLAlchemy\nimport os\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nimport json\nimport qrcode\n\nfile_path = os.path.abspath(os.getcwd())+\"\\database.db\"\napp = Flask(__name__)\napp.config['SECRET_KEY']='RThsiissecrete!'\napp.config['SQLALCHEMY_DATABASE_URI']='sqlite:///'+file_path\n\n\npicFolder = os.path.join('static','pics')\napp.config['UPLOAD_FOLDER']=picFolder\n\n\nBootstrap(app)\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n\n\nclass User(UserMixin,db.Model):\n    id = db.Column(db.Integer,primary_key=True)\n    username = db.Column(db.String(15),unique=True)\n    email = db.Column(db.String(50),unique=True)\n    password=db.Column(db.String(80))\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\nclass LoginForm(FlaskForm):\n    username = StringField('username',validators = [InputRequired(), Length(min=4, max=15 )])\n    password = PasswordField('password', validators = [InputRequired(),Length(min=8, max=80)])\n    remember = BooleanField('remember')\n\nclass RegisterForm(FlaskForm):\n    email = StringField('email', validators= [InputRequired(),Email(message='Invalid email'), Length(max=50)])\n    username = StringField('username',validators= [InputRequired(), Length(min=4, max=15 )])\n    password = PasswordField('password', validators= [InputRequired(),Length(min=8, max=80)])\n\nclass UserDetailForm(FlaskForm):\n    location = StringField('location',validators = [InputRequired(), Length(min=4, max=8 )])\n    destination = StringField('destination',validators = [InputRequired(), Length(min=4, max=8 )])\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login',methods=['GET','POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username = form.username.data).first()  \n        if user :\n            if check_password_hash(user.password, form.password.data):\n                login_user(user, remember=form.remember.data)\n                return redirect(url_for('create_profile'))\n        return '<h1>Invalid username or password</h1>'\n    return render_template('login.html',form=form)\n\n@app.route('/signup',methods=['GET','POST'])\ndef signup():\n    form = RegisterForm()\n    global username\n    if form.validate_on_submit():\n        username = form.username.data\n        hashed_password=generate_password_hash(form.password.data, method=\"sha256\")\n        new_user = User(username=form.username.data,email=form.email.data,password = hashed_password)\n        db.session.add(new_user)\n        db.session.commit()\n        return redirect(url_for('login'))\n    return render_template('signup.html',form=form)\n\n@app.route('/create_profile',methods=['GET','POST'])\n@login_required\ndef create_profile():\n    form = UserDetailForm()\n    with open('user_details.json') as f:\n        initial_data = json.load(f)\n    data_user = {\"id\":current_user.id,\"username\":current_user.username,\"location\":form.location.data, \"destination\":form.destination.data}\n    \n\n    for x,y in enumerate(initial_data):\n        #position,value\n        if current_user.id==initial_data[x][\"id\"]:\n            initial_data= initial_data[x]\n            user_name = initial_data[\"username\"]\n            user_id=initial_data[\"id\"]\n            result_data = y\n\n    print(f\"user_names: {user_name}, {current_user.username}\")\n    print(f\"user_names: {user_id}, {current_user.id}\")\n\n    if user_id==current_user.id and user_name==current_user.username:\n        print(\"we can continue to profile\")\n        return redirect(url_for('profile'))\n\n    else :\n        print(\"we can contiue to create profile\")\n         #check for null values \n        if data_user[\"location\"] is None :\n            print(\"do no insert null values\") \n        else :\n            initial_data.append(data_user)\n            with open('user_details.json', 'w') as fp:\n                json.dump(initial_data, fp)\n            return redirect(url_for('profile'))\n    return render_template('create_profile.html',form =form)\n\n@app.route('/profile',methods=['GET','POST'])\n@login_required\ndef profile():\n    #OPEN JSON FILE \n    with open('user_details.json') as f:\n        data = json.load(f)\n    \n    for x,y in enumerate(data):\n        #position,value\n        if current_user.id==data[x][\"id\"]:\n            data= data[x]\n            user_name = data[\"username\"]\n            result_data = y\n    #CREATE QR CODE\n    img=qrcode.make(result_data)\n    img.save(f\"static/pics/{user_name}_code.png\")\n\n    #LOAD QR CODE\n    pic1 = os.path.join(app.config[\"UPLOAD_FOLDER\"], f'{user_name}_code.png')\n    \n    print(\"zabalaza\")\n    return render_template('profile.html',data = data,user_image=pic1)\n    \n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user\n    return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    app.run(debug=True)"
}